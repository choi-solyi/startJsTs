Part5 Ch4 TypeScript Compiler
@ Compilation Context

@tsconfig schema
 최상위 프로퍼티
compileOnSave
extends
compilOptions
files
include
exclude
 ...

프젝 생성

mkdir ~
cd ~
npm init -y
npm i typescript -D
npx tsc --init


@compileOnSave

// tsconfig.json 
  "compileOnSave": true,	 //default -> false
VSCode 에서는 이미 지원하고있음

@extends
// tsconfig.json
strict : true 잠시 주석처리

"extends": './base.json' 추가해주고 
base.json 파일에 strict: true 값을 입력해준다.


// test.ts
const a: number = undefined;
a값이 에러로 뜬다면 stirct가 true 
빨같 밑줄이 없다면 strict가 false

$ npm i --save-dev @tsconfig/deno
설치후에 아래 추가해서 사용할수있다

"extends": "@tsconfig/deno/tsconfig.json" 

@ files, include, exclude

  // 셋다 설정이 안되어있으면 전부 컴파일
  // files : 상대,절대경로의 리스트 배열
  // files : 모든 파일을 컴파일 할것은 아니기 때문에 명시해줌.. "가장 강력함"

  // include, exclude : glob패턴 (.gitignore같은)

  // include : exclude 보다 약함 (.ts .tsx .d.ts 만 include)
  // include : 컴팡리 포함시킬 파일. glob패턴의 string list

  // exclude : node_module, bowser_components, jspm_packages, <outDir>는 제외
  // exclude : 컴파일 제외시킬 파일. glob패턴의 string list

@compileOptions
typeRoots, types
 
1. 아무설정 안하면?  -> node_modules_/@types 라는 모든 경로를 찾아서 사용
 $ npm i react (X)
 >>> 
 $ npm i --save-dev @types/react
설치해주면 import React from "react" 를 오류 없이 사용할수있음
위와 같은 디폴트 설정 외에도 typeroots, types를 쓸수있음


2. 배열안에 들어있는 경로들 아래서만 가져옴
./node_module/@types 와 동일한것
 - typeRoots


3. 배열 안의 모듈 혹은 node_modules/@types 안의 모듈 이름을 찾아온다.
[] 빈배열로 지정할시 이 시스템 이용 안한다는 의미
- Types


2,3번은 같이 사용하지 않음.


@comileOptions  - target / lib

target  기본설정은 ES5이고, 여기서는 화살표 함수를 지원하지않음
test.ts 파일에서 const hello = () => { } 를 작성한뒤
$ npx tsc 를 실행해서 js파일을 열어보면 function () { } 와 같은 형태로 구성되어있음을 확인할수있다.

ES6로 변경을 해주면 화살표함수를 사용할수있기 때문에 그대료 () => { } 화삼표 함수의 형태를 띄고 있음을 알 수 있다.


target : 빌드의 결과물을 어떤 버전으로 할것이냐, 지정안하면 es3
lib : 기본 타입 definition 라이브러리 어떤거 사용할건지 ?
 - 지정안했을때 target 버전에 따라 디폴트로 사용하는 값들이 달라짐
 - lib를 지정하면 그lib배열로만 라이브러리를 사용할수있다.
   - 빈 매열인 경우 no definition found 어쩌구 ~ 에러 발생


@comileOptions  - outDir, outFile, rootDir
outDir: "./dist"
rootDir: "./src"	(프로젝트 루트를 src로 지정하겠다는 의미)

@comileOptions  - strict
앞으로 무조건 strict 를 true로 켜야한다.
"엄격하게" 타입을 체크하는 옵션을 활성화 한다

--noImplicitAny : 명시적이지 않게 any 타입을사용하며, 표현식과 선언에 사용하면 에러를 발생시킴
추론에 실패한 경우 any가 맞으면 any라고 지정

--noImplicitAny : 명시적이지 않게 any 타입을 사용하며, this표현식에 사용하면 에러를 발생시킴

--strictNullChecks (중요) : 안켜면 모든 타입시스템에 오류가 발생! 모든 타입에 null, undefined가 포함되게 됨.
켜게되면
모든 타입은 null, undefined값을 가질수없고, 가지려면 union type을 이용해서 직접 명시해야한다.

타입가드~
any  무적~

이 옵션을 적용하지 않는 경우, 어떤값이 null, undefined를 가진다는것을 암묵적으로 인정하고 계속 사용하다보면, 정확히 어떤 타입이 오는지 개발자가 간과하게된다 
-> 그러므로 null, undefined 의 값을 가지게되는 경우 해당값을 조건부로 제외하고 사용하는것이 좋다.
-> 사용하는 함수를 선언할때붜 매개변수와 리턴 값에 정확한 타입을 지정하려는 노력을 기울여야한다.

--strictFunctionTypes 
함수타이베 대한 biraiant 매개 변수 검사를 비활성화

animal -> greyhound  <: dog -> dog
반화 타입은 공변적
인자 타입은 반공변적

하지만 TS에서 인자타입은 공변적이면서 반공변적다

--strictPropertyInitialization
정의 되지 않은 클래스의 속성이 생성자에서 초기화 되었는지 확인할수있다
사용하려면 --strictNullChecks를 사용하도록 설정해야한다.

--strictBindCallApply
function의 내장함수인 bind, call, apply를 사용할때 대한 '더' 엄격한 검사 수행

--alwaysStrict
각 소스파일에 대해 Javascript 의 strict 모드로 코드를 분석하고 "엄격하게 사용"을 해제.




