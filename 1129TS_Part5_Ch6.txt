Part5 Ch6 Classes

클래스란? 
 오브젝트를 만드는 청사진, 설계도를 의미함
 이전에는 function 으로 만들었었다.
 javascript 도 es6부터는 사용할수있지만 몇몇 기능이 없음
 OOP ? >

@ Quick Start

npm환경 설치
$ npm init -y
타입스크립트 다운로드
$ npm i typescript -D
설정파일 생성
$ npx tsc --init
컴파일
$ npx tsc 
실행
$  node example.js
class Person {
  name;
  constructor(name:string){
    this.name = name;
  }
}


@ 생성자와 초기화

생성자 함수가 없으면 디폴드 생성자가 불린다.
생성자가 하나라도 있으면 디폴트 생성자는 사라진다.
프로퍼티선언 or 생성자에서 값을 할당하지 않는 경우에는 !를 붙여서 위험을 표현한다.
클래스의 프로퍼티가 정의되어있는데 값을 대입하지 않으면 undefined
생성자에는 async 설정불가

@접근제어자 
기본적으로 외부에서 접근이 가능하다. public 
private age 로 변경 했을때는 외부에서 p1.age 사용이 불가능해진다.
이전에는 _age 이런식으로 private 를 표기 해주었었는데
현재까지도 private인 경우에는 언더바를 앞에 붙여서 표기해주는 경우도 있다.

protected는 외부에서 접근이 불가능하지만 상속관계에 있으면 접근이 가능해진다.
클래스의 상속에 대해 배운뒤 다시 설명


@ 초기화 in 컨스트럭터 파라미터
생성자 파라미터안에서 public 입력해서 바로 초기화할수있다.

@ getter & setter

클래스 내부에서 
get name() {
  return this._name
} 
set name(n) { 
  this._name = n
}

@Readonly Properties
readonly 세팅은 -> 초기화 선언부분 or 컨트스럭터 내부 에서만 가능!!

@index signatures in class
class Students {
  // [index: string]: string;
  [index: string]: "male" | "female";

  //모든 반에 mark라는 학생이  있다고 가정할때
  mark: "male" = "male";
}

@static properties & methods